{"version":3,"sources":["components/Alert/index.tsx","store/inputForm/types.ts","store/inputForm/actions.ts","components/InputForm/index.tsx","store/users/types.ts","helpers/authHeader.ts","services/users.ts","store/alerts/types.ts","store/alerts/actions.ts","store/users/actions.ts","components/NewPointForm/index.tsx","components/LoginForm/index.tsx","store/map/types.ts","components/LeafletMap/index.tsx","store/map/actions.ts","components/App/index.tsx","store/inputForm/reducers.ts","store/map/reducers.ts","store/alerts/reducers.ts","store/users/reducers.ts","store/index.ts","index.tsx"],"names":["Alert","alert","useSelector","state","role","aria-label","className","style","message","SET_START_POINT","SET_END_POINT","SET_ALGORITHM","setStartPoint","startPoint","type","setEndPoint","endPoint","setAlgorithm","algorithm","InputForm","useState","pathfinderOptions","setPathfinderOptions","pointOptions","setPointOptions","inputForm","points","userPanel","availablePathfinders","map","dispatch","useDispatch","useEffect","length","pathfinder","value","point","nodeId","name","onChange","event","target","USERS_LOGIN_REQUEST","USERS_LOGIN_SUCCESS","USERS_LOGIN_FAILURE","USERS_LOGOUT","USERS_REGISTRATION_REQUEST","USERS_REGISTRATION_SUCCESS","USERS_REGISTRATION_FAILURE","USERS_GETPOINTS_SUCCESS","USERS_GETPOINTS_FAILURE","USERS_ADDNEWPOINT_START","USERS_ADDNEWPOINT_END","USERS_ADDNEWPOINT_REQUEST","USERS_ADDNEWPOINT_SUCCESS","USERS_ADDNEWPOINT_FAILURE","authHeader","storedUser","localStorage","getItem","user","JSON","parse","username","token","loginUser","password","requestOptions","method","headers","body","stringify","fetch","then","handleResponse","response","setItem","catch","error","logoutUser","removeItem","registrationUser","addNewUserPoint","tokenHeader","Object","assign","getUserPoints","text","data","ok","status","statusText","Promise","reject","ALERT_SUCCESS","ALERT_WARNING","ALERT_ERROR","ALERT_CLEAR","alertSuccess","alertError","alertClear","loginSuccess","login","a","logout","registration","addNewPointEnd","getPointsSuccess","NewPointForm","userName","addingNewPoint","selectingPointOnMap","disabled","onClick","LoginForm","setUsername","setPassword","loggingIn","clickHandler","action","autoComplete","SET_AVAILABLE_PATHFINDERS","LeafletMap","leafletMap","setLeafletMap","leafletRouteGroupLayer","setLeafletRouteGroupLayer","leafletMarkerGroupLayer","setLeafletMarkerGroupLayer","graph","setGraph","pathfinders","setPathfinders","distance","fromNode","toNode","fromNodeLatInRadians","lat","Math","PI","fromNodeLonInRadians","lon","toNodeLatInRadians","toNodeLonInRadians","haversineLat","pow","sin","haversineLon","haversine","cos","asin","sqrt","lMap","L","center","zoom","layers","tileLayer","attribution","layerGroup","addTo","G","kirovRoads","elements","forEach","element","addNode","id","nodes","i","addLink","aGreedy","heuristic","aStar","nba","keys","key","push","setAvailablePathfinders","remove","clear","cleanPathGroupLayer","useCallback","eachLayer","layer","node","getNode","parseInt","marker","bindTooltip","permanent","routeID","reverseRouteID","storedRoute","route","path","find","LatLng","addLayer","polyline","color","interactive","leafletMapClickHandler","newPoint","links","latlng","lng","currentNearestNode","Infinity","forEachNode","currentNode","d","toString","newPointName","prompt","on","off","App","loggedIn","initialState","defaultPoints","registering","rootReducer","combineReducers","update","$set","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64592333.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport './style.scss';\r\n\r\nimport {AppState} from \"../../store\";\r\n\r\nconst Alert = () => {\r\n    const alert = useSelector((state: AppState) => state.alert);\r\n\r\n    return (\r\n        <div role='alert' aria-label='Error' className={alert.style}>\r\n            {alert.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;\r\n","export interface InputFormState {\r\n    startPoint: string;\r\n    endPoint: string;\r\n    algorithm: string;\r\n}\r\n\r\nexport const SET_START_POINT = 'SET_START_POINT';\r\nexport const SET_END_POINT = 'SET_END_POINT';\r\nexport const SET_ALGORITHM = 'SET_ALGORITHM';\r\n\r\ninterface SetStartPointAction {\r\n    type: typeof SET_START_POINT;\r\n    startPoint: string;\r\n}\r\n\r\ninterface SetEndPointAction {\r\n    type: typeof SET_END_POINT;\r\n    endPoint: string;\r\n}\r\n\r\ninterface SetAlgorithmAction {\r\n    type: typeof SET_ALGORITHM;\r\n    algorithm: string;\r\n}\r\n\r\nexport type InputFormTypes = SetStartPointAction | SetEndPointAction | SetAlgorithmAction;","import {InputFormTypes, SET_ALGORITHM, SET_END_POINT, SET_START_POINT} from \"./types\";\r\n\r\nexport function setStartPoint(startPoint: string): InputFormTypes {\r\n    return {\r\n        type: SET_START_POINT,\r\n        startPoint: startPoint\r\n    };\r\n}\r\n\r\nexport function setEndPoint(endPoint: string): InputFormTypes {\r\n    return {\r\n        type: SET_END_POINT,\r\n        endPoint: endPoint\r\n    };\r\n}\r\n\r\nexport function setAlgorithm(algorithm: string): InputFormTypes {\r\n    return {\r\n        type: SET_ALGORITHM,\r\n        algorithm: algorithm\r\n    };\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {setStartPoint, setEndPoint, setAlgorithm} from \"../../store/inputForm/actions\";\r\nimport {AppState} from \"../../store\";\r\n\r\nimport './style.scss';\r\n\r\nconst InputForm = () => {\r\n    const [pathfinderOptions, setPathfinderOptions] = useState<JSX.Element[]>([]);\r\n    const [pointOptions, setPointOptions] = useState<JSX.Element[]>([]);\r\n\r\n    const inputForm = useSelector((state: AppState) => state.inputForm);\r\n    const points = useSelector((state: AppState) => state.userPanel.points);\r\n    const availablePathfinders = useSelector((state: AppState) => state.map.availablePathfinders);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (availablePathfinders.length > 0) {\r\n            setPathfinderOptions(availablePathfinders.map((pathfinder) =>\r\n                <option key={pathfinder} value={pathfinder}>\r\n                    {pathfinder}\r\n                </option>\r\n            ));\r\n            dispatch(setAlgorithm(availablePathfinders[0]));\r\n        }\r\n    }, [dispatch, availablePathfinders]);\r\n\r\n    useEffect(() => {\r\n        if (points.length > 0) {\r\n            setPointOptions(points.map((point) =>\r\n                <option key={point.nodeId} value={point.nodeId}>\r\n                    {point.name}\r\n                </option>\r\n            ));\r\n            dispatch(setStartPoint(points[0].nodeId));\r\n            dispatch(setEndPoint(points[0].nodeId));\r\n        }\r\n    }, [dispatch, points]);\r\n\r\n    return (\r\n        <div className='input-form' role='form' aria-label=\"Input Form\">\r\n            <div className='input-form__item'>\r\n                <label className='input-form__label'>\r\n                    Start\r\n                    <select className='input-form__select'\r\n                            value={inputForm.startPoint}\r\n                            onChange={(event: React.ChangeEvent<HTMLSelectElement>) => dispatch(setStartPoint(event.target.value))}\r\n                    >\r\n                        {pointOptions}\r\n                    </select>\r\n                </label>\r\n            </div>\r\n            <div className='input-form__item'>\r\n                <label className='input-form__label'>\r\n                    End\r\n                    <select className='input-form__select'\r\n                            value={inputForm.endPoint}\r\n                            onChange={(event: React.ChangeEvent<HTMLSelectElement>) => dispatch(setEndPoint(event.target.value))}\r\n                    >\r\n                        {pointOptions}\r\n                    </select>\r\n                </label>\r\n            </div>\r\n            <div className='input-form__item'>\r\n                <label className='input-form__label'>\r\n                    Algorithm\r\n                    <select className='input-form__select'\r\n                            value={inputForm.algorithm}\r\n                            onChange={(event: React.ChangeEvent<HTMLSelectElement>) => dispatch(setAlgorithm(event.target.value))}\r\n                    >\r\n                        {pathfinderOptions}\r\n                    </select>\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputForm;","export interface Point {\r\n    nodeId: string,\r\n    name: string\r\n}\r\n\r\nexport interface User {\r\n    username: string,\r\n    token: string\r\n}\r\n\r\nexport interface UserPanelState {\r\n    addingNewPoint: boolean,\r\n    selectingPointOnMap: boolean,\r\n    loggingIn: boolean,\r\n    loggedIn: boolean,\r\n    registering: boolean,\r\n    points: Point[],\r\n    user: User\r\n}\r\n\r\nexport const USERS_LOGIN_REQUEST = 'USERS_LOGIN_REQUEST';\r\nexport const USERS_LOGIN_SUCCESS = 'USERS_LOGIN_SUCCESS';\r\nexport const USERS_LOGIN_FAILURE = 'USERS_LOGIN_FAILURE';\r\nexport const USERS_LOGOUT = 'USERS_LOGOUT';\r\n\r\nexport const USERS_REGISTRATION_REQUEST = 'USERS_REGISTRATION_REQUEST';\r\nexport const USERS_REGISTRATION_SUCCESS = 'USERS_REGISTRATION_SUCCESS';\r\nexport const USERS_REGISTRATION_FAILURE = 'USERS_REGISTRATION_FAILURE';\r\n\r\nexport const USERS_GETPOINTS_SUCCESS = 'USERS_GETPOINTS_SUCCESS';\r\nexport const USERS_GETPOINTS_FAILURE = 'USERS_GETPOINTS_FAILURE';\r\n\r\nexport const USERS_ADDNEWPOINT_START = 'USERS_ADDNEWPOINT_START';\r\nexport const USERS_ADDNEWPOINT_END = 'USERS_ADDNEWPOINT_END';\r\nexport const USERS_ADDNEWPOINT_REQUEST = 'USERS_ADDNEWPOINT_REQUEST';\r\nexport const USERS_ADDNEWPOINT_SUCCESS = 'USERS_ADDNEWPOINT_SUCCESS';\r\nexport const USERS_ADDNEWPOINT_FAILURE = 'USERS_ADDNEWPOINT_FAILURE';\r\n\r\ninterface UsersLoginRequest {\r\n    type: typeof USERS_LOGIN_REQUEST;\r\n}\r\n\r\ninterface UsersLoginSuccess {\r\n    type: typeof USERS_LOGIN_SUCCESS;\r\n    user: User;\r\n}\r\n\r\ninterface UsersLoginFailure {\r\n    type: typeof  USERS_LOGIN_FAILURE;\r\n}\r\n\r\ninterface UsersLogout {\r\n    type: typeof USERS_LOGOUT;\r\n}\r\n\r\ninterface UsersRegistrationRequest {\r\n    type: typeof USERS_REGISTRATION_REQUEST;\r\n}\r\n\r\ninterface UsersRegistrationSuccess {\r\n    type: typeof USERS_REGISTRATION_SUCCESS;\r\n}\r\n\r\ninterface UsersRegistrationFailure {\r\n    type: typeof USERS_REGISTRATION_FAILURE;\r\n}\r\n\r\ninterface UsersAddNewPointStart {\r\n    type: typeof USERS_ADDNEWPOINT_START;\r\n}\r\n\r\ninterface UsersAddNewPointEnd {\r\n    type: typeof USERS_ADDNEWPOINT_END;\r\n}\r\n\r\ninterface UsersAddNewPointRequest {\r\n    type: typeof USERS_ADDNEWPOINT_REQUEST;\r\n}\r\n\r\ninterface UsersAddNewPointSuccess {\r\n    type: typeof USERS_ADDNEWPOINT_SUCCESS;\r\n}\r\n\r\ninterface UsersAddNewPointFailure {\r\n    type: typeof USERS_ADDNEWPOINT_FAILURE;\r\n}\r\n\r\ninterface UsersGetpointsSuccess {\r\n    type: typeof USERS_GETPOINTS_SUCCESS;\r\n    points: Point[];\r\n}\r\n\r\ninterface UsersGetpointsFailure {\r\n    type: typeof USERS_GETPOINTS_FAILURE;\r\n}\r\n\r\nexport type UsersTypes = UsersLoginRequest | UsersLoginSuccess | UsersLoginFailure | UsersLogout |\r\n    UsersRegistrationRequest | UsersRegistrationSuccess | UsersRegistrationFailure |\r\n    UsersGetpointsSuccess | UsersGetpointsFailure |\r\n    UsersAddNewPointStart | UsersAddNewPointEnd |\r\n    UsersAddNewPointRequest | UsersAddNewPointSuccess | UsersAddNewPointFailure;","export function authHeader() {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n        const user = JSON.parse(storedUser);\r\n\r\n        if (user.username !== '' && user.token !== '') {\r\n            return { 'x-access-token': user.token }\r\n        } else {\r\n            return null;\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n}","import {authHeader} from \"../helpers/authHeader\";\r\n\r\nexport function loginUser(username: string, password: string) {\r\n    const headers = {'Content-type': 'application/json'};\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: headers,\r\n        body: JSON.stringify({username: username, password: password})\r\n    };\r\n\r\n    return fetch('/loginUser', requestOptions)\r\n        .then(handleResponse)\r\n        .then(response => {\r\n            localStorage.setItem('user', JSON.stringify(response.user));\r\n\r\n            return response;\r\n        })\r\n        .catch(error => {\r\n            throw(error.message);\r\n        });\r\n}\r\n\r\nexport function logoutUser() {\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nexport function registrationUser(username: string, password: string) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {'Content-type': 'application/json'},\r\n        body: JSON.stringify({username: username, password: password})\r\n    };\r\n\r\n    return fetch('/registerUser', requestOptions)\r\n        .then(handleResponse)\r\n        .catch(error => {\r\n            throw(error.message);\r\n        });\r\n\r\n}\r\n\r\nexport function addNewUserPoint(username: string, nodeId: string, name: string) {\r\n    const headers = {'Content-type': 'application/json'};\r\n    const tokenHeader = authHeader();\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: tokenHeader ? Object.assign(headers, tokenHeader) : headers,\r\n        body: JSON.stringify({username: username, nodeId: nodeId, name: name})\r\n    };\r\n\r\n    return fetch('/addUserPoint', requestOptions)\r\n        .then(handleResponse)\r\n        .catch(error => {\r\n            throw(error.message);\r\n        });\r\n}\r\n\r\nexport function getUserPoints(username: string) {\r\n    const headers = {'Content-type': 'application/json'};\r\n    const tokenHeader = authHeader();\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: tokenHeader ? Object.assign(headers, tokenHeader) : headers,\r\n        body: JSON.stringify({username: username})\r\n    };\r\n\r\n    return fetch('/getUserPoints', requestOptions)\r\n        .then(handleResponse)\r\n        .catch(error => {\r\n            throw(error.message);\r\n        });\r\n}\r\n\r\nfunction handleResponse(response: Response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                logoutUser();\r\n            }\r\n\r\n            const error: TypeError = {\r\n                name: 'Response error',\r\n                message: (data && data.message) || response.statusText\r\n            };\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}","export interface AlertState {\r\n    style: string;\r\n    message: string;\r\n}\r\n\r\nexport const ALERT_SUCCESS = 'ALERT_SUCCESS';\r\nexport const ALERT_WARNING = 'ALERT_WARNING';\r\nexport const ALERT_ERROR = 'ALERT_ERROR';\r\nexport const ALERT_CLEAR = 'ALERT_CLEAR';\r\n\r\ninterface AlertSuccess {\r\n    type: typeof ALERT_SUCCESS;\r\n    message: string;\r\n}\r\n\r\ninterface AlertWarning {\r\n    type: typeof  ALERT_WARNING;\r\n    message: string;\r\n}\r\n\r\ninterface AlertError {\r\n    type: typeof ALERT_ERROR;\r\n    message: string;\r\n}\r\n\r\ninterface AlertClear {\r\n    type: typeof ALERT_CLEAR;\r\n}\r\n\r\nexport type AlertTypes = AlertSuccess | AlertWarning | AlertError | AlertClear;","import {ALERT_CLEAR, ALERT_ERROR, ALERT_SUCCESS, ALERT_WARNING, AlertTypes} from \"./types\";\r\n\r\nexport function alertSuccess(message: string): AlertTypes {\r\n    return {\r\n        type: ALERT_SUCCESS,\r\n        message: message\r\n    };\r\n}\r\n\r\nexport function alertWarning(message: string): AlertTypes {\r\n    return {\r\n        type: ALERT_WARNING,\r\n        message: message\r\n    };\r\n}\r\n\r\nexport function alertError(message: string): AlertTypes {\r\n    return {\r\n        type: ALERT_ERROR,\r\n        message: message\r\n    };\r\n}\r\n\r\nexport function alertClear(): AlertTypes {\r\n    return {\r\n        type: ALERT_CLEAR\r\n    };\r\n}","import {Dispatch} from \"redux\";\r\n\r\nimport {\r\n    Point,\r\n    User,\r\n    USERS_LOGIN_REQUEST,\r\n    USERS_LOGIN_SUCCESS,\r\n    USERS_LOGIN_FAILURE,\r\n    USERS_LOGOUT,\r\n    USERS_REGISTRATION_REQUEST,\r\n    USERS_REGISTRATION_SUCCESS,\r\n    USERS_REGISTRATION_FAILURE,\r\n    USERS_ADDNEWPOINT_START,\r\n    USERS_ADDNEWPOINT_END,\r\n    USERS_ADDNEWPOINT_REQUEST,\r\n    USERS_ADDNEWPOINT_SUCCESS,\r\n    USERS_ADDNEWPOINT_FAILURE,\r\n    USERS_GETPOINTS_SUCCESS,\r\n    USERS_GETPOINTS_FAILURE,\r\n    UsersTypes\r\n} from \"./types\";\r\nimport {addNewUserPoint, getUserPoints, loginUser, logoutUser, registrationUser} from \"../../services/users\";\r\nimport {alertClear, alertError, alertSuccess} from \"../alerts/actions\";\r\nimport {DispatchFunctionType} from \"../index\";\r\n\r\nexport function loginRequest(): UsersTypes {\r\n    return {\r\n        type: USERS_LOGIN_REQUEST,\r\n    }\r\n}\r\n\r\nexport function loginSuccess(user: User): UsersTypes {\r\n    return {\r\n        type: USERS_LOGIN_SUCCESS,\r\n        user: user\r\n    }\r\n}\r\n\r\nexport function loginFailure(): UsersTypes {\r\n    return {\r\n        type: USERS_LOGIN_FAILURE\r\n    }\r\n}\r\n\r\nexport const login = (username: string, password: string) => async (dispatch: DispatchFunctionType) => {\r\n    dispatch(loginRequest());\r\n\r\n    await loginUser(username, password)\r\n        .then(\r\n            response => {\r\n                dispatch(loginSuccess(response.user));\r\n                dispatch(alertSuccess(response.message));\r\n                },\r\n            error => {\r\n                dispatch(loginFailure());\r\n                dispatch(alertError(error));\r\n                }\r\n        );\r\n};\r\n\r\nexport function logoutAction() {\r\n    return {\r\n        type: USERS_LOGOUT\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n    logoutUser();\r\n    dispatch(logoutAction());\r\n    dispatch(alertClear());\r\n};\r\n\r\nexport function registrationRequest(): UsersTypes {\r\n    return {\r\n        type: USERS_REGISTRATION_REQUEST\r\n    }\r\n}\r\n\r\nexport function registrationSuccess(): UsersTypes {\r\n    return {\r\n        type: USERS_REGISTRATION_SUCCESS\r\n    }\r\n}\r\n\r\nexport function registrationFailure(): UsersTypes {\r\n    return {\r\n        type: USERS_REGISTRATION_FAILURE\r\n    }\r\n}\r\n\r\nexport const registration = (username: string, password: string) => async (dispatch: DispatchFunctionType) => {\r\n    dispatch(registrationRequest());\r\n\r\n    await registrationUser(username, password)\r\n        .then(\r\n            response => {\r\n                dispatch(registrationSuccess());\r\n                dispatch(alertSuccess(response.message));\r\n            },\r\n            error => {\r\n                dispatch(registrationFailure());\r\n                dispatch(alertError(error));\r\n            }\r\n        );\r\n}\r\n\r\nexport function addNewPointStart(): UsersTypes {\r\n    return {\r\n        type: USERS_ADDNEWPOINT_START\r\n    }\r\n}\r\n\r\nexport function addNewPointEnd(): UsersTypes {\r\n    return {\r\n        type: USERS_ADDNEWPOINT_END\r\n    }\r\n}\r\n\r\nexport function addNewPointRequest(): UsersTypes {\r\n    return {\r\n        type: USERS_ADDNEWPOINT_REQUEST\r\n    }\r\n}\r\n\r\nexport function addNewPointSuccess(): UsersTypes {\r\n    return {\r\n        type: USERS_ADDNEWPOINT_SUCCESS\r\n    }\r\n}\r\n\r\nexport function addNewPointFailure(): UsersTypes {\r\n    return {\r\n        type: USERS_ADDNEWPOINT_FAILURE\r\n    }\r\n}\r\n\r\nexport const addNewPoint = (username: string, nodeId: string, name: string) => async (dispatch: DispatchFunctionType) => {\r\n    dispatch(addNewPointRequest());\r\n\r\n    await addNewUserPoint(username, nodeId, name)\r\n        .then(\r\n            response => {\r\n                dispatch(addNewPointSuccess());\r\n                dispatch(alertSuccess(response.message));\r\n            },\r\n            error => {\r\n                dispatch(addNewPointFailure());\r\n                dispatch(alertError(error));\r\n            }\r\n        );\r\n}\r\n\r\nexport function getPointsSuccess(points: Point[]): UsersTypes {\r\n    return {\r\n        type: USERS_GETPOINTS_SUCCESS,\r\n        points: points\r\n    }\r\n}\r\n\r\nfunction getPointsFailure(): UsersTypes {\r\n    return {\r\n        type: USERS_GETPOINTS_FAILURE\r\n    }\r\n}\r\n\r\nexport const getPoints = (username: string) => async (dispatch: DispatchFunctionType) => {\r\n    await getUserPoints(username)\r\n        .then(\r\n            points => dispatch(getPointsSuccess(points)),\r\n            error => {\r\n                dispatch(getPointsFailure());\r\n                dispatch(alertError(error));\r\n            }\r\n        );\r\n}","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {logout} from \"../../store/users/actions\";\r\nimport {alertClear, alertWarning} from \"../../store/alerts/actions\";\r\nimport {addNewPointStart, addNewPointEnd, getPoints} from \"../../store/users/actions\";\r\nimport {AppState} from \"../../store\";\r\n\r\nimport './style.scss';\r\n\r\nconst NewPointForm = () => {\r\n    const userName = useSelector((state: AppState) => state.userPanel.user.username);\r\n    const addingNewPoint = useSelector((state: AppState) => state.userPanel.addingNewPoint);\r\n    const selectingPointOnMap = useSelector((state: AppState) => state.userPanel.selectingPointOnMap);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!addingNewPoint) {\r\n            dispatch(getPoints(userName));\r\n        }\r\n    }, [dispatch, userName, addingNewPoint]);\r\n\r\n    const handleAddNewPointButton = () => {\r\n        if (selectingPointOnMap) {\r\n            dispatch(addNewPointEnd());\r\n            dispatch(alertClear());\r\n        } else {\r\n            dispatch(addNewPointStart());\r\n            dispatch(alertWarning('Click on map to add new point'));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='new-point-form'\r\n             role='form'\r\n             aria-label=\"New Point Form\"\r\n        >\r\n            <input className='new-point-form__button'\r\n                   type='button'\r\n                   value={ selectingPointOnMap ? \"Stop\" : \"New Point\" }\r\n                   disabled={addingNewPoint}\r\n                   onClick={handleAddNewPointButton}\r\n            />\r\n            <input className='new-point-form__button'\r\n                   type='button'\r\n                   value='Logout'\r\n                   onClick={() => dispatch(logout())}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewPointForm;","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {alertError} from \"../../store/alerts/actions\";\r\nimport {login, registration} from \"../../store/users/actions\";\r\nimport {AppState} from \"../../store\";\r\n\r\nimport './style.scss';\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const loggingIn = useSelector((state: AppState) => state.userPanel.loggingIn);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const clickHandler = (action: typeof login | typeof registration) => {\r\n        if (username !== '') {\r\n            if (password !== '') {\r\n                dispatch(action(username, password));\r\n            } else {\r\n                dispatch(alertError('Password is empty'));\r\n            }\r\n        } else {\r\n            dispatch(alertError('Username is empty'));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='login-form' role='form' aria-label=\"Login Form\">\r\n            <div className='login-form__item'>\r\n                <label className='login-form__label'>\r\n                    Username\r\n                    <input className='login-form__input'\r\n                           type='text'\r\n                           name='username'\r\n                           autoComplete='on'\r\n                           value={username}\r\n                           onChange={(event: React.ChangeEvent<HTMLInputElement>) => setUsername(event.target.value)}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div className='login-form__item'>\r\n                <label className='login-form__label'>\r\n                    Password\r\n                    <input className='login-form__input'\r\n                           type='password'\r\n                           name='password'\r\n                           autoComplete='on'\r\n                           value={password}\r\n                           onChange={(event: React.ChangeEvent<HTMLInputElement>) => setPassword(event.target.value)}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div className='login-form__item'>\r\n                <button className='login-form__button'\r\n                       type='submit'\r\n                       value='login'\r\n                       disabled={loggingIn}\r\n                       onClick={() => clickHandler(login)}\r\n                >\r\n                    Login\r\n                </button>\r\n            </div>\r\n            <div className='login-form__item'>\r\n                <button className='login-form__button'\r\n                       type='submit'\r\n                       value='registration'\r\n                       disabled={loggingIn}\r\n                       onClick={() => clickHandler(registration)}\r\n                >\r\n                    Registration\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","export interface MapState {\r\n    availablePathfinders: string[];\r\n}\r\n\r\nexport const SET_AVAILABLE_PATHFINDERS = 'SET_AVAILABLE_PATHFINDERS';\r\n\r\ninterface SetAvailablePathfindersAction {\r\n    type: typeof SET_AVAILABLE_PATHFINDERS;\r\n    availablePathfinders: string[];\r\n}\r\n\r\nexport type MapTypes = SetAvailablePathfindersAction;","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport L from 'leaflet';\r\nimport G, {Graph, Node} from 'ngraph.graph';\r\nimport {aStar, aGreedy, nba, PathFinder}  from 'ngraph.path';\r\n\r\nimport './style.scss';\r\n\r\nimport kirovRoads from '../../assets/kirov-roads.json';\r\nimport {addNewPoint, addNewPointEnd} from \"../../store/users/actions\";\r\nimport {setAvailablePathfinders} from \"../../store/map/actions\";\r\nimport {AppState} from \"../../store\";\r\n\r\nconst LeafletMap = () => {\r\n    interface NodeData {\r\n        lat: number;\r\n        lon: number;\r\n    }\r\n\r\n    interface PathFinders {\r\n        [key: string]: PathFinder<NodeData> | null;\r\n    }\r\n\r\n    const [leafletMap, setLeafletMap] = useState<L.Map | null>(null);\r\n    const [leafletRouteGroupLayer, setLeafletRouteGroupLayer] = useState<L.LayerGroup | null>(null);\r\n    const [leafletMarkerGroupLayer, setLeafletMarkerGroupLayer] = useState<L.LayerGroup | null>(null);\r\n    const [graph, setGraph] = useState<Graph | null>(null);\r\n    const [pathfinders, setPathfinders] = useState<PathFinders>({\r\n        'aGreedy': null,\r\n        'aStar': null,\r\n        'dijkstra': null,\r\n        'nba': null\r\n    });\r\n\r\n    const inputForm = useSelector((state: AppState) => state.inputForm);\r\n    const userName = useSelector((state: AppState) => state.userPanel.user.username);\r\n    const points = useSelector((state: AppState) => state.userPanel.points);\r\n    const selectingPointOnMap = useSelector((state: AppState) => state.userPanel.selectingPointOnMap);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Prepare distance and heuristics functions\r\n    const distance = (fromNode: Node, toNode: Node): number => {\r\n        const earthRadius = 6378137;\r\n\r\n        const fromNodeLatInRadians = fromNode.data.lat * Math.PI / 180;\r\n        const fromNodeLonInRadians = fromNode.data.lon * Math.PI / 180;\r\n        const toNodeLatInRadians = toNode.data.lat * Math.PI / 180;\r\n        const toNodeLonInRadians = toNode.data.lon * Math.PI / 180;\r\n\r\n        const haversineLat = Math.pow(Math.sin((toNodeLatInRadians - fromNodeLatInRadians)/2), 2);\r\n        const haversineLon = Math.pow(Math.sin((toNodeLonInRadians - fromNodeLonInRadians)/2), 2);\r\n        const haversine = haversineLat + Math.cos(fromNodeLatInRadians) * Math.cos(toNodeLatInRadians) * haversineLon;\r\n\r\n        return 2 * earthRadius * Math.asin(Math.sqrt(haversine));\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Prepare leaflet map and grouped layers for markers and path\r\n        const lMap = L.map('map', {\r\n            center: [58.6026, 49.66664],\r\n            zoom: 16,\r\n            layers: [\r\n                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\r\n                    attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                }),\r\n            ],\r\n        });\r\n\r\n        setLeafletMarkerGroupLayer(L.layerGroup().addTo(lMap));\r\n        setLeafletRouteGroupLayer(L.layerGroup().addTo(lMap));\r\n        setLeafletMap(lMap);\r\n\r\n        // Fill graph with data from file\r\n        const graph = G();\r\n        kirovRoads.elements.forEach(element => {\r\n            if (element.type === 'node') {\r\n                graph.addNode(element.id, { lat: element.lat, lon: element.lon });\r\n            }\r\n            else {\r\n                const nodes = element.nodes;\r\n                for (let i = 1; i < nodes.length; ++i) {\r\n                    graph.addLink(nodes[i], nodes[i-1]);\r\n                }\r\n            }\r\n        });\r\n        setGraph(graph);\r\n\r\n        // Prepare pathfinders\r\n        const aGreedyPathfinder: PathFinder<NodeData> = aGreedy(graph, {distance: distance, heuristic: distance});\r\n        const aStarPathfinder: PathFinder<NodeData> = aStar(graph, {distance: distance, heuristic: distance});\r\n        const dijkstraPathfinder: PathFinder<NodeData> = aStar(graph, {distance: distance, heuristic: () => 0});\r\n        const nbaPathfinder: PathFinder<NodeData> = nba(graph, {distance: distance, heuristic: distance});\r\n        const pathfinders = {\r\n            'aGreedy': aGreedyPathfinder,\r\n            'aStar': aStarPathfinder,\r\n            'dijkstra': dijkstraPathfinder,\r\n            'nba': nbaPathfinder\r\n        };\r\n        setPathfinders(pathfinders);\r\n\r\n        // Put list of available pathfinders to redux store\r\n        const availablePathfinders = [];\r\n        for (const key of Object.keys(pathfinders)) {\r\n            availablePathfinders.push(key);\r\n        }\r\n        dispatch(setAvailablePathfinders(availablePathfinders));\r\n\r\n        // On component unmount\r\n        return () => {\r\n            lMap?.remove();\r\n            graph?.clear();\r\n        };\r\n    }, [dispatch]);\r\n\r\n    const cleanPathGroupLayer = useCallback(() => {\r\n        if (leafletRouteGroupLayer) {\r\n            leafletRouteGroupLayer.eachLayer(layer => {\r\n               layer.remove();\r\n            });\r\n        }\r\n    }, [leafletRouteGroupLayer]);\r\n\r\n    useEffect(() => {\r\n        cleanPathGroupLayer();\r\n\r\n        if (leafletMarkerGroupLayer && graph) {\r\n            // Clean marker group layer\r\n            leafletMarkerGroupLayer.eachLayer(layer => {\r\n                layer.remove();\r\n            });\r\n\r\n            // Fill marker group layer with user points\r\n            points.forEach(point => {\r\n                const node = graph.getNode(parseInt(point.nodeId));\r\n                if (node) {\r\n                    L.marker([node.data.lat, node.data.lon])\r\n                        .bindTooltip(point.name, {\r\n                            permanent: false\r\n                        })\r\n                        .addTo(leafletMarkerGroupLayer);\r\n                }\r\n            });\r\n        }\r\n    }, [graph, leafletMarkerGroupLayer, cleanPathGroupLayer, points]);\r\n\r\n    useEffect(() => {\r\n        cleanPathGroupLayer();\r\n\r\n        // Get new route and fill route group layer\r\n        if (inputForm.startPoint !== inputForm.endPoint) {\r\n            const routeID = inputForm.algorithm + '-' + inputForm.startPoint + '-' + inputForm.endPoint;\r\n            const reverseRouteID = inputForm.algorithm + '-' + inputForm.endPoint + '-' + inputForm.startPoint;\r\n            const storedRoute = localStorage.getItem(routeID) || localStorage.getItem(reverseRouteID);\r\n            let route: Array<L.LatLng> = [];\r\n\r\n            if (storedRoute) {\r\n                route = JSON.parse(storedRoute);\r\n            } else {\r\n                const path = pathfinders[inputForm.algorithm]?.find(parseInt(inputForm.startPoint), parseInt(inputForm.endPoint));\r\n                if (path) {\r\n                    route = path.map(element => {\r\n                        return new L.LatLng(element.data.lat, element.data.lon);\r\n                    });\r\n                    localStorage.setItem(routeID, JSON.stringify(route));\r\n                }\r\n            }\r\n\r\n            if (leafletRouteGroupLayer && route.length > 0) {\r\n                leafletRouteGroupLayer.addLayer(L.polyline(route, {\r\n                    color: 'red',\r\n                    interactive: false\r\n                }));\r\n            }\r\n        }\r\n    }, [leafletRouteGroupLayer, pathfinders, cleanPathGroupLayer, inputForm]);\r\n\r\n    const leafletMapClickHandler = useCallback((event: L.LeafletMouseEvent) => {\r\n        const newPoint = {id: '', links: [], data: {lat: event.latlng.lat, lon: event.latlng.lng }};\r\n        const currentNearestNode = {id: '', distance: Infinity};\r\n\r\n        graph?.forEachNode((currentNode) => {\r\n            const d = distance(newPoint, currentNode);\r\n            if (d < currentNearestNode.distance) {\r\n                currentNearestNode.id = currentNode.id.toString();\r\n                currentNearestNode.distance = d;\r\n            }\r\n            return false;\r\n        });\r\n        const newPointName = prompt('New point name');\r\n        if (newPointName) {\r\n            dispatch(addNewPoint(userName, currentNearestNode.id, newPointName));\r\n            dispatch(addNewPointEnd());\r\n        }\r\n    }, [dispatch, graph, userName]);\r\n\r\n    useEffect(() => {\r\n        if (leafletMap) {\r\n            if (selectingPointOnMap) {\r\n                leafletMap.on('click', leafletMapClickHandler);\r\n            } else {\r\n                leafletMap.off('click', leafletMapClickHandler);\r\n            }\r\n        }\r\n    }, [leafletMap, leafletMapClickHandler, selectingPointOnMap]);\r\n\r\n    return (\r\n        <div id='map'/>\r\n    );\r\n}\r\n\r\nexport default LeafletMap;","import {MapTypes, SET_AVAILABLE_PATHFINDERS} from \"./types\";\r\n\r\nexport function setAvailablePathfinders(availablePathfinders: string[]): MapTypes {\r\n    return {\r\n        type: SET_AVAILABLE_PATHFINDERS,\r\n        availablePathfinders: availablePathfinders\r\n    };\r\n}","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport Alert from \"../Alert\";\nimport InputForm from \"../InputForm\";\nimport NewPointForm from \"../NewPointForm\";\nimport LoginForm from \"../LoginForm\";\nimport LeafletMap from \"../LeafletMap\";\nimport { AppState } from \"../../store\";\nimport {loginSuccess} from \"../../store/users/actions\";\n\nimport './style.scss';\n\nconst App = () => {\n    const loggedIn = useSelector((state: AppState) => state.userPanel.loggedIn);\n    const alert = useSelector((state: AppState) => state.alert);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n            const user = JSON.parse(storedUser);\n            dispatch(loginSuccess(user));\n        }\n    }, [dispatch]);\n\n    return (\n        <div className='application'>\n            <div className='control-panel'>\n                <InputForm />\n                { alert.message ? <Alert /> : null }\n                { loggedIn ? <NewPointForm /> : <LoginForm /> }\n            </div>\n            <LeafletMap />\n        </div>\n    );\n}\n\nexport default App;\n","import update from 'immutability-helper';\r\n\r\nimport {\r\n    InputFormState,\r\n    InputFormTypes,\r\n    SET_ALGORITHM,\r\n    SET_END_POINT,\r\n    SET_START_POINT\r\n} from \"./types\";\r\n\r\nconst initialState: InputFormState = {\r\n    startPoint: '',\r\n    endPoint: '',\r\n    algorithm: '',\r\n};\r\n\r\nexport function inputFormReducer(\r\n    state = initialState,\r\n    action: InputFormTypes\r\n): InputFormState {\r\n    switch (action.type) {\r\n        case SET_START_POINT:\r\n            return update(state, {\r\n                startPoint: { $set: action.startPoint }\r\n            });\r\n        case SET_END_POINT:\r\n            return update(state, {\r\n                endPoint: { $set: action.endPoint }\r\n            });\r\n        case SET_ALGORITHM:\r\n            return update(state, {\r\n                algorithm: { $set: action.algorithm }\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import update from 'immutability-helper';\r\n\r\nimport {MapState, MapTypes, SET_AVAILABLE_PATHFINDERS} from \"./types\";\r\n\r\nconst initialState: MapState = {\r\n    availablePathfinders: []\r\n}\r\n\r\nexport function mapReducer(\r\n    state = initialState,\r\n    action: MapTypes\r\n): MapState {\r\n    switch (action.type) {\r\n        case SET_AVAILABLE_PATHFINDERS:\r\n            return update(state, {\r\n                availablePathfinders: { $set: action.availablePathfinders }\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import update from 'immutability-helper';\r\n\r\nimport {ALERT_CLEAR, ALERT_ERROR, ALERT_SUCCESS, ALERT_WARNING, AlertState, AlertTypes} from \"./types\";\r\n\r\nconst initialState: AlertState = {\r\n    style: '',\r\n    message: '',\r\n};\r\n\r\nexport function alertReducer(\r\n    state = initialState,\r\n    action: AlertTypes\r\n): AlertState {\r\n    switch (action.type) {\r\n        case ALERT_SUCCESS:\r\n            return update(state, {\r\n                style: { $set: 'success' },\r\n                message: { $set: action.message }\r\n            });\r\n        case ALERT_WARNING:\r\n            return update(state, {\r\n                style: { $set: 'warning' },\r\n                message: { $set: action.message }\r\n            });\r\n        case ALERT_ERROR:\r\n            return update(state, {\r\n                style: { $set: 'danger' },\r\n                message: { $set: action.message }\r\n            });\r\n        case ALERT_CLEAR:\r\n            return update(state, {\r\n                style: { $set: '' },\r\n                message: { $set: '' }\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import update from 'immutability-helper';\r\n\r\nimport {\r\n    UserPanelState,\r\n    USERS_LOGIN_REQUEST,\r\n    USERS_LOGIN_SUCCESS,\r\n    USERS_LOGIN_FAILURE,\r\n    USERS_LOGOUT,\r\n    USERS_REGISTRATION_REQUEST,\r\n    USERS_REGISTRATION_SUCCESS,\r\n    USERS_REGISTRATION_FAILURE,\r\n    USERS_ADDNEWPOINT_START,\r\n    USERS_ADDNEWPOINT_END,\r\n    USERS_ADDNEWPOINT_REQUEST,\r\n    USERS_ADDNEWPOINT_SUCCESS,\r\n    USERS_ADDNEWPOINT_FAILURE,\r\n    USERS_GETPOINTS_SUCCESS,\r\n    USERS_GETPOINTS_FAILURE,\r\n    UsersTypes\r\n} from \"./types\";\r\n\r\nconst defaultPoints = [\r\n    {nodeId: '2572156610', name: 'Drama theatre'},\r\n    {nodeId: '5269608776', name: 'Circus'},\r\n    {nodeId: '3708439426', name: 'Vasnetsov art museum'},\r\n    {nodeId: '1345594583', name: 'Alexander garden'},\r\n    {nodeId: '1350861918', name: 'Philharmonie'},\r\n];\r\n\r\nconst initialState: UserPanelState = {\r\n    addingNewPoint: false,\r\n    selectingPointOnMap: false,\r\n    loggingIn: false,\r\n    loggedIn: false,\r\n    registering: false,\r\n    points: defaultPoints,\r\n    user: { username: '', token: '' }\r\n};\r\n\r\nexport function usersReducer(\r\n    state = initialState,\r\n    action: UsersTypes\r\n): UserPanelState {\r\n    switch (action.type) {\r\n        case USERS_LOGIN_REQUEST:\r\n            return update(state, {\r\n                loggingIn: { $set: true },\r\n            });\r\n        case USERS_LOGIN_SUCCESS:\r\n            return update(state, {\r\n                loggingIn: { $set: false },\r\n                loggedIn: { $set: true },\r\n                user: { $set: action.user }\r\n            });\r\n        case USERS_LOGIN_FAILURE:\r\n            return update(state, {\r\n                loggingIn: { $set: false },\r\n                loggedIn: { $set: false },\r\n                user: { $set: { username: '', token: '' } }\r\n            });\r\n        case USERS_LOGOUT:\r\n            return update(state, {\r\n                loggingIn: { $set: false},\r\n                loggedIn: { $set: false},\r\n                points: { $set: defaultPoints },\r\n                user: { $set: { username: '', token: ''} }\r\n            });\r\n        case USERS_REGISTRATION_REQUEST:\r\n            return update(state, {\r\n                registering: { $set: true },\r\n            });\r\n        case USERS_REGISTRATION_SUCCESS:\r\n            return update(state, {\r\n                registering: { $set: false },\r\n            });\r\n        case USERS_REGISTRATION_FAILURE:\r\n            return update(state, {\r\n                registering: { $set: false },\r\n            });\r\n        case USERS_ADDNEWPOINT_START:\r\n            return update(state, {\r\n                selectingPointOnMap: { $set: true },\r\n            });\r\n        case USERS_ADDNEWPOINT_END:\r\n            return update(state, {\r\n                selectingPointOnMap: { $set: false },\r\n            });\r\n        case USERS_ADDNEWPOINT_REQUEST:\r\n            return update(state, {\r\n                addingNewPoint: { $set: true},\r\n            });\r\n        case USERS_ADDNEWPOINT_SUCCESS:\r\n            return update(state, {\r\n                addingNewPoint: { $set: false },\r\n            });\r\n        case USERS_ADDNEWPOINT_FAILURE:\r\n            return update(state, {\r\n                addingNewPoint: { $set: false },\r\n            });\r\n        case USERS_GETPOINTS_SUCCESS:\r\n            return update(state, {\r\n                points: { $set: action.points },\r\n            });\r\n        case USERS_GETPOINTS_FAILURE:\r\n            return update(state, {\r\n                points: { $set: defaultPoints },\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkDispatch} from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport { inputFormReducer } from \"./inputForm/reducers\";\r\nimport { mapReducer } from \"./map/reducers\";\r\nimport { alertReducer } from \"./alerts/reducers\";\r\nimport { usersReducer } from \"./users/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    alert: alertReducer,\r\n    inputForm: inputFormReducer,\r\n    userPanel: usersReducer,\r\n    map: mapReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nexport type DispatchFunctionType = ThunkDispatch<AppState, undefined, AnyAction>;\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer, composeWithDevTools(\r\n            applyMiddleware<DispatchFunctionType, AppState>(thunk),\r\n        )\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './normalize.css';\nimport './index.css';\nimport App from './components/App';\nimport configureStore from \"./store\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}